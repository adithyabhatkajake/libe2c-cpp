#+TITLE: Resources

* Links
** [[https://github.com/hot-stuff/libhotstuff][HotStuff GitHub]]


* Files to fix
** DONE [10/10] include/libe2c
*** [X] consensus.h
*** [X] client.h
*** [X] crypto.h
*** [X] entity.h
*** [X] hotstuff.h
*** [X] liveness.h
*** [X] promise.hpp
*** [X] task.h
*** [X] util.h
*** [X] type.h

** WAIT [0/3] examples
*** [ ] CmakeLists.txt
*** [ ] e2c_app
*** [ ] e2c_client

** WAIT [2/4] tests
*** [X] secp256k1_test
*** WAIT steady_state_correct_leader_test
*** WAIT byzantine_leader_test
*** [X] CmakeLists

** DONE [9/9] source
*** [X] client.cpp
Compiles Correctly
*** [X] config.h.in
*** [X] consensus.cpp
*** [X] crypto.cpp
*** [X] entity.cpp
*** [X] hotstuff.cpp
*** [X] hotstuff_keygen.cpp
*** [X] hotstuff_tls_keygen.cpp
*** [X] util.cpp

** WAIT [0/4] scripts
*** [ ] faulty_leader_demo.sh
A script to automate the demo of fault tolerance in E2C
*** [ ] gen_conf.py
A script that generates the configuration such as public keys, base ports and other settings.
*** [ ] run_demo.sh
A script to automate the steady state with correct leader runs.
*** [ ] run_demo_client.sh
A script that runs the clients to the automated replication service.


* TODO [1/5] Work left to do
** DONE [ ] Check if everything compiles
Make sure to add all the sources in Cmakelists and ensure that there are no compilation errors at least.
** TODO [/] Test if the protocol works
Run it and see if the code crashes or not. In the beginning it should just print the stats or something.
*** WAIT [ ] Enable Code Logging to ensure that the protocol works.
** TODO [ ] Implement E2C Best Case
** TODO [ ] Implement E2C View Change
